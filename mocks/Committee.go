// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import msg "gitlab.dusk.network/dusk-core/dusk-go/pkg/core/consensus/msg"
import prerror "gitlab.dusk.network/dusk-core/dusk-go/pkg/util/nativeutils/prerror"

// Committee is an autogenerated mock type for the Committee type
type Committee struct {
	mock.Mock
}

// IsMember provides a mock function with given fields: _a0
func (_m *Committee) IsMember(_a0 []byte) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Quorum provides a mock function with given fields:
func (_m *Committee) Quorum() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// VerifyVoteSet provides a mock function with given fields: voteSet, hash, round, step
func (_m *Committee) VerifyVoteSet(voteSet []*msg.Vote, hash []byte, round uint64, step uint8) *prerror.PrError {
	ret := _m.Called(voteSet, hash, round, step)

	var r0 *prerror.PrError
	if rf, ok := ret.Get(0).(func([]*msg.Vote, []byte, uint64, uint8) *prerror.PrError); ok {
		r0 = rf(voteSet, hash, round, step)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prerror.PrError)
		}
	}

	return r0
}
