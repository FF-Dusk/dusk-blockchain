// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import sortedset "github.com/dusk-network/dusk-blockchain/pkg/util/nativeutils/sortedset"
import user "github.com/dusk-network/dusk-blockchain/pkg/core/consensus/user"

// Foldable is an autogenerated mock type for the Foldable type
type Foldable struct {
	mock.Mock
}

// IsMember provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Foldable) IsMember(_a0 user.Provisioners, _a1 []byte, _a2 uint64, _a3 uint8) bool {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bool
	if rf, ok := ret.Get(0).(func(user.Provisioners, []byte, uint64, uint8) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Pack provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Foldable) Pack(_a0 user.Provisioners, _a1 sortedset.Set, _a2 uint64, _a3 uint8) uint64 {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(user.Provisioners, sortedset.Set, uint64, uint8) uint64); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Quorum provides a mock function with given fields: _a0
func (_m *Foldable) Quorum(_a0 user.Provisioners) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(user.Provisioners) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Unpack provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Foldable) Unpack(_a0 user.Provisioners, _a1 uint64, _a2 uint64, _a3 uint8) sortedset.Set {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 sortedset.Set
	if rf, ok := ret.Get(0).(func(user.Provisioners, uint64, uint64, uint8) sortedset.Set); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sortedset.Set)
		}
	}

	return r0
}
