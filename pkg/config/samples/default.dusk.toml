# Configs marked with #live# can be modified without node restart

# general node configs
[general]
network = "testnet"
# walletonly will prevent the node from starting consensus components when the wallet is loaded
walletonly = false

# logger configs
[logger]
# log levels can be any of error, warn, trace
level = "debug"
# 'stdout' or file name without ext
# result filename would be $output$network.port.log
output = "debug"
[logger.monitor]
# enabling log based monitoring
enabled = false
rpc="grpc"
# transport
transport="unix"
# target
address="/tmp/dusk-monitor.sock"

# tell logger to stream errors and warnings to monitoring process
streamErrors=true
    
# Gossip peer settings
[network]

# listens on all available unicast and anycast
# IP addresses of the local system.

# port for the node to bind on
port=7000

[network.seeder]
# array of seeder servers
addresses=["127.0.0.1:8081"]
#addresses=["voucher.dusk.network:8081"]
# fixed network addresses to setup local P2P network
# supported only in testnet
fixed = []

[network.monitor]
enabled = false
address="monitor.dusk.network:1337"

# Kadcast peer settings
[kadcast]

# By enabling it, node will join an experimental kadcast network
# In addition, topics.Block and topics.Tx will be propagated in kadcast network
# NB: The messages propagated in kadcast are not propagated in gossip
enabled=false

# Enable/Disable RC-UDP transport
raptor=true

# Both listeners (UDP and TCP) are binding on this local addr
# NB The addr should be reachable from outside
address="127.0.0.1:7100"

# Maximum delegates per bucket
maxDelegatesNum=3

# List of bootstarpping nodes
bootstrappers=["voucher.dusk.network:9090","voucher.dusk.network:9091","voucher.dusk.network:9092"]


[database]
# Backend storage used to store chain
# Supported drivers heavy_v0.1.0
driver = "heavy_v0.1.0"
# backend storage path -- should be different from wallet db dir
dir = "chain"

[wallet]
# wallet file path 
file = "wallet.dat"
# wallet database path -- should be different from blockchain db dir
store = "walletDB"

[mempool]
# Max size of memory of the accepted txs to keep
maxSizeMB = 100
# Possible values: "hashmap", "syncpool", "memcached" 
poolType = "hashmap"
# number of txs slots to allocate on each reseting mempool
preallocTxs = 100
# Max number of items to respond with on topics.Mempool request
# To disable topics.Mempool handling, set it to 0
maxInvItems = 10000

# gRPC API service
[rpc]

# network must be "tcp", "tcp4", "tcp6", "unix" or "unixpacket".
network="unix"
# in case the network is unix, 
# address must be a path to a unix socket (e.g /tmp/file.sock)
# in case the network is tcp*,
# address must be in form of a IP address (e.g 127.0.0.1:9000)
address="/tmp/dusk-grpc.sock"

# Basic HTTP Authentication credentials
# if empty, auth is disabled
user=""
pass=""

enableTLS=false
# server TLS certificate file
certFile=""
# server TLS key file
keyFile=""

# GraphQL API service
[gql]
# enable graphql service
enabled=true
# network must be "tcp", "tcp4", "tcp6", "unix" or "unixpacket".
network="tcp"
address="127.0.0.1:9001"

# enable/disable both HTTPS and WSS
enableTLS = false
# server TLS certificate file
certFile = ""
# server TLS key file
keyFile = ""

# maximum requests per second 
# uniqueness of a request is based on: 
# Remote IP, Request method and path
maxRequestLimit = 20

[gql.notification]
# Number of pub/sub brokers to broadcast new blocks. 
# 0 brokersNum disables notifications system
brokersNum = 0
clientsPerBroker = 1000

[[profile]]
# An array of profiling tasks
# types: cpu, heap, memstats, block, goroutine, mutex
#
# Examples:
#
# Continuous CPU profiling (cpu_$timestamp.prof)
# Start CPU profiling each hour and fetch samples for 60 sec
# 
# [[profile]]
# name = "cpu"
# interval = 3600
# duration = 60
#
# Continuous Memory profiling (heap_$timestamp.prof)
# Records complete memory profile each 30 mins
# name = "heap", interval = 1800, duration = 1800
#
# Log Memory and GC stats into log each 10 sec
# name = "memstats", interval = 10, duration = 1

[performance]
# Number of workers to spawn on an accumulator component
accumulatorWorkers = 4

# Information for the node to send consensus transactions with
[consensus]
# default amount of blocks to lock the consensus transaction up for
defaultlocktime = 250000
# default amount, in whole units of DUSK, to send for consensus transactions.
defaultamount = 5
