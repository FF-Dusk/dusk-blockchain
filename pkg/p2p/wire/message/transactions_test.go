// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this
// file, you can obtain one at https://opensource.org/licenses/MIT.
//
// Copyright (c) DUSK NETWORK. All rights reserved.

package message_test

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/dusk-network/dusk-blockchain/pkg/config"
	"github.com/dusk-network/dusk-blockchain/pkg/core/data/ipc/transactions"
	"github.com/dusk-network/dusk-blockchain/pkg/p2p/wire/checksum"
	"github.com/dusk-network/dusk-blockchain/pkg/p2p/wire/message"
	"github.com/dusk-network/dusk-blockchain/pkg/p2p/wire/protocol"
	"github.com/stretchr/testify/assert"
)

//nolint
func TestWireTransaction(t *testing.T) {
	assert := assert.New(t)

	hexWire := "a30800000000000000000000010000000000000000000000b9e6f5c30a0100000001000000520800000100000000000000cc8f1b3e111f4203cb1f38b7d43b14713e59678264179b7c29797ba12daa35570200000000000000010c8088b9e8c9d06915673d4d94fc76348fb7ce7503e8587f30caea67ab8379b815ce6aba274054f337bdd92d9411d8be3f282b05e3c6d42e8eea9f3215b8de33b96a3c7c1dbcb4d8cdd8ef13e50e84cf6480116311677676269d3e662cea608c5a3479e042102a78621252a37f2d99e6824e17a2b11597147d1adf4624e7d436ffffffffffffffff997ebe7877346dc48137c1d115176c60c5dbf0ea77dd8cdca0cfbc0f3d90304ecb5b2b3d60a2b9d4df4a999ef3a768f8bd75c75aac343bff35bed7cfb2e3513315e8ece73c24ca0c97bda403149dcf9fea1c8827b682c1bbe089c8d10355c45e01e549d068cb470cbefe6fddd3b2d8aacfa5a76805e725d5394e882a79d157695ec48dcb7e531ccc3b334ae122d4fd40e242e7d8a85fdb82bd4c9e9621a9a60d042dbbaec8a2acb879b48d311f1264b1aafe6bf26ccc0bb250af7a2e19e8dcdc3851f382c509fb449a701a93c9489ae97bae88feaebe38fc6c128dc4b286724c10ffffffffffffffff14b611da24f94e89dd03121410f05b53c52cfc785da3c8d59bb65d07b78ab0241c6a8f3ffadc251790b9f78a31b82246c883cbfa1330337bd094045c01dcca2a7de1eadf6f1f7116169ed9dd10541a407035bb8fe834a973d8176f51f07a8435fee6a01aa94b675366ed1b054b8091542329dd1538bcec8a7503906281f0b61200ca9a3b000000000200000000000000d85dbd596fc0476c779f3e2e7b5e58b732cb71f9ca056a8828cf845885a22f17848a28b1224942eb4222b7c43fc01e60529c7ee5fab115f3802c91179d0edfa19851d4394c5da06a86f955b2bd1305672e61a9569b5e024f03c957d4160d3d23fad4651d0897d60d89845c58baee90dbb291366e711628910673b9f3eedaaec355d87e2b2619a6809157bf01d3579145794a2b10e5e0f23d053e48a699ad318d80d2e737ca67e32f0848724907f3a847befe125d83031fc249cc24d489bee3cca6dfba0129d5578102c594b72631a13797cc0413391a5a1886c7536e6fdc0c489dfdbc00baba13e05157a7ab7273523dbb98d34c06e3a058424f361aad4a8fbda04b3327dbf973a2fc07d54445ebe6651b2e35a3f5c983dad6f05599505d20e8049ab8b6a8f099304dbc4badb806e2e8b02f90619eacef17710c48c316cddd0889badea8613806d13450208797859e6271335cda185bbfc5844358e701c0ca03ad84e86019661d4b29336d10be7f2d1510cb65478f0ea3e0baea5d49ff962bcccdcf4396a0b3cfed0f1b8c5537b148f88f31e782f30be64807cad8900706b18a31cce9a743694b0abf94d6ff32789e870b3b70970bc2a01b69faea5a6dfc3514b4d6cf831dd715429cb3c9c3c9011422260233eab35f30dec5415fe06f9a22e5e4847cde93f61e896ebeec082ced1e65b7bf5dfe6f6dd064d2649580ae5ec6b09934167cdd0efc24150dee406c18dc4d6def110c74049a3f14c7d2b019606518ab91cba648915908d032c33cd3a6c07bfb908902c5a8bd55ed5fb25582659a9f4fb82aedba03c6946823b020ff8fad039772696c1b58a3434a5c53f5b6670943e90ccf49fb24d88929f467341cd68978082969dfc75ccdf161e1340bb3d66633b52703b2efd6cf769395fa892f5738cf5dee96afe27fe085bed54dd607bc0f0b3fe5fd5e83f1a18ed9e3457ac28bc6a49224c20f17d63fbc38f2d3e49af4f108407a9523e55fc1e89a2c221b0d15a993a3856a9f9618655555f7828734da3193ad2353c81a6f0720e90dbc62a8dcdd1e117b8f6addd574a6c483a5bebb06255e9614ff22ce4ac848de8ee8df47bd133fbd5f46bf9bf9a56e80d6e411cf2803186dad1a7cd9176ba85dff17e29471fb1c6f3a9304630e190406857e511c93711eca6a472f89005ddef430f0df953dcf5a3751bddaf39da32e25a87b1f41cc23f14b25ea9e0289785520696b0a82d6a23a19eb11ca32021c414ba83f0d4012933a4a962826e7185f21f440c8b08c1adf58aec9daee1c8e15e607239e819fc5dea80c697e800a1a18acd235789fb9dfee43f3e8a51ba190656ca8ee9dc7ed1cbfce26a0deb7563f52292f3f6bef6360095b1fa416afa01640ddbabbd3b8fc15223d50c0cdc80cb846947b80408764fab356051d2783e2a9e54917cfaab223c75dd8d5187841fbe93fc79bbc1d63ffffce68ae16c3b4ef3bd92d87bec21f2f958ab4f91535f10c50ef186e3a4d2a43b8060ac15b9ef21256e52123862563540c14d9d0904c20c70d2c5915e352b582f7ee0dfe3338658c1e7245b651428799705d9b76847e9fc8a872ef3aae9c978ca64e3f5f11dd7d49decaad5c299680e7478ddc9651d8578774431b46cc701601af616f9c7323ce76fcd1c6055f7d02652c9a2354ad21ebfd1df37d5254609e3d38666940a2a6dd21c59400bf444f8b297203243de4099b1c8640fb43849f160cdab42a52e0a107df5db400819f7587957f07d72cb498ae97aa6d1e67ae2900ff56f7378f742e04fcdedd2a72ef20aea340f9f65cff2bedc1362733170906a443a1964bdc59c245808014604e2fc9c9f23ecc590da6bedcb81c69ef8f369d69a0c9c663e0faccefde8bf848224166c59b49eb9a58f8fb38bdb42f6b33b5470378bfe21a980b1d78a8da4c32b4f380127bdd6a9c0c96f1b3ee4c0bbc69fa312e7a77560ad2eafdc97017ff9e51da30ee8e2acfaef091236c4c6cf66e2f43129d70744812d2eafdc97017ff9e51da30ee8e2acfaef091236c4c6cf66e2f43129d707448126981ddc905c11356d461b7ccc828dc1ac8e3c92cc9ba3619ee76f9150095a75304d64fd0d2d436f18e6881aae6b7d99bed17078b8f508f0cf4bb2dbd3e7f7871170c739f9d9ea4404bff4066c3ed34d6a52245965b485b766344a380f65e5d2800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	hexTxHash := "63155db32cdb892e74465950c5fc0ab0e25c218855e141430333cc68cb78e208"

	txHash, err := hex.DecodeString(hexTxHash)
	if err != nil {
		t.Fatalf("Unable to decode hash hex: %v", err)
	}

	wire, err := hex.DecodeString(hexWire)
	if err != nil {
		t.Fatalf("Unable to decode tx hex: %v", err)
	}

	// buffer := bytes.NewBuffer(wire)

	gossip := protocol.NewGossip()
	// frame := gossip.(buffer)

	reader := bytes.NewReader(wire)

	// read message (extract length and magic)
	b, err := gossip.ReadMessage(reader)
	if err != nil {
		t.Fatalf("Cannot extract length and magic: %v", err)
	}
	// extract checksum
	m, cs, err := checksum.Extract(b)
	if err != nil {

		t.Fatalf("error extracting message and cs: %v", err)
		return
	}
	// verify checksum
	if !checksum.Verify(m, cs) {
		t.Fatalf("invalid checksum: %v", err)
		return
	}

	buffer := bytes.NewBuffer(m)

	message, err := message.Unmarshal(buffer, config.KadcastInitHeader)
	if err != nil {
		t.Fatalf("Unable to unmarshal: %v", err)
	}
	tx := message.Payload().(*transactions.Transaction)

	assert.EqualValues(1, tx.Version, "tx Version mismatch")
	assert.EqualValues(transactions.Transfer, tx.TxType, "txType is not TRANSFER")

	decoded, err := tx.Decode()
	if err != nil {
		t.Fatalf("Unable to unmarshal: %v", err)
	}

	assert.EqualValues(1000000000, decoded.Fee.GasLimit, "unexpected GasLimit")
	assert.EqualValues(2, decoded.Fee.GasPrice, "unexpected GasPrice")

	hash, err := decoded.Hash(tx.TxType)
	if err != nil {
		t.Fatalf("Unable to hash transaction: %v", err)
	}

	assert.EqualValues(txHash, hash, "hash mismatch")
}

//nolint
func TestCoinbaseTransaction(t *testing.T) {
	assert := assert.New(t)

	hexPayload := "007d2f25b968f9d81cb8d53cc4149888c8f9dc28b8746380c9f54c9dbec55548a0dc95b7941a61534f5b12733a8ede7869d21ee3108d95e7c3ad2cf95a5e3502248f718574d92c255f0e4a3ac0394baf17d45d87d621287edd07674b8809da13cb1ee914c33fb33d2b6b39ad18ffc7d816102c23421e7b99a68b71a08a43826bd20e00000000000000c8fbac010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002f35c3ada6983ea2e312d68fee8e8e50d590cdc846164931a6edeaf0c3fe07493a866915a98c56251bc5bb561e97f7bdf687003c4a742fa42aa6697c2e5afa10eedba04eec9b41e4b800b80be19b2a506c99360f41b8663ae5e7bd4d93f8f79e09455d26c1f02f3c71364f1e471110dfa2ad406bc0fc437c827fbd48193b67c00f000000000000000eda140f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	hexTxHash := "bdcadedb29422e70d2f39d5901cd13f7ddeade980198aa2a79be2a16e080890a"

	txHash, err := hex.DecodeString(hexTxHash)
	if err != nil {
		t.Fatalf("Unable to decode hash hex: %v", err)
	}

	payload, err := hex.DecodeString(hexPayload)
	if err != nil {
		t.Fatalf("Unable to decode tx hex: %v", err)
	}

	txdummy := transactions.NewTransaction()
	txdummy.TxType = 0
	txdummy.Payload.Data = payload

	decoded, err := txdummy.Decode()
	if err != nil {
		t.Fatalf("Unable to decode coinbase: %v", err)
	}
	assert.EqualValues(decoded.Anchor, make([]byte, 32), "Anchor should be empty")
	assert.Nil(decoded.Call, "Call should not be present")
	assert.Nil(decoded.Crossover, "Crossover should not be present")
	assert.Zero(decoded.Fee.GasLimit, "GasLimit should be 0")
	assert.Zero(decoded.Fee.GasPrice, "GasPrice should be 0")
	assert.Empty(decoded.Nullifiers, "Nullifiers should not be present")
	assert.EqualValues(uint64(28113864), decoded.Notes[0].DecodeTxAmount())
	assert.EqualValues(uint64(253024782), decoded.Notes[1].DecodeTxAmount())

	hash, err := decoded.Hash(txdummy.TxType)
	if err != nil {
		t.Fatalf("Unable to calculate hash for coinbase: %v", err)
	}

	assert.EqualValues(txHash, hash, "hash mismatch")
}

//nolint
func TestStakeTransaction(t *testing.T) {
	assert := assert.New(t)

	hexPayload := "0100000000000000cc8f1b3e111f4203cb1f38b7d43b14713e59678264179b7c29797ba12daa35570100000000000000013109e360574645745caa6142abea347b46fb6b8a3cc20b5cf6eab89e5c5a3a23c48dcb7e531ccc3b334ae122d4fd40e242e7d8a85fdb82bd4c9e9621a9a60d04a7360f31dc0426451e57b526451a5c3749c131cd38c80f84b235005cef4d1b02b3badf1200e8f833c22807fb59db2aa2ec69b33477ff68a6c5efbd050da26bd0ffffffffffffffff804addb18b81f357b17072a65d2c17be9f9880324b97101a75c2bfa8b55cb500a74664a6634a404d8fe7c237c0ac343120b7c2a08c07dcb5bfb478b81639c60c5c185f7619b3cca25826cc61b513d036ca43d57839334c1b6a708cc5cdc65357c2d75af6c841dea58bf26450280177ca947ff0841df8d1ff6251b71ac4b15b4500f2052a0100000001000000000000008fcfc11603cb86871527b0ea685928cb15f2328de0a7f078b23ab5da376059060ed3d05d422e85952935b66044045643cc70f423a86064c58e9b6823c902364d80a41af01cb4414876143c29eb4b65b919e6f370bcd879e75e85f99665409dc3fbd08421a4e9eeb8c963999190b3bd5a86e06ea698e6ea301b63126b81101631f59b796e0835c1705590a853df76521f45ab2aac2c1689734a904c78d9d214138315c2a81f23bc1d59070dc6077c2e57b7909b8960292f89002aa038ed02184e8f19ea41f398e08601ddedea1095a66dac0b2068cd51aa71f29bd9704856e4afcc69a0af74624eea8cbad94284ba3d5cf1d8226dcdebe89bb7ef461f6208844e82000f52bdf77333799c9a1e661b9fe920d7fe3fe459127f6a838cf8a4b612350ea8f7b3c537ca2296ac845644d1bdaca0cc559097ac320bc543c5debbee3d897315ee6441659fc98e37164641b49fc3a9e7c57b55659ecdadbb4804013d9b8e855e699f03eac5c265a406bd6115f0e84124406f24289284ff20dec8d2bf8a608075476e6262841fa0b72be2548d7f21b78064700c1af4153a47f2c267a9692ab14135365590a24029ed6c355d2207dc35b4dc66fc7a591489e8e408faa9cd66911409a731bbe59b8a96a7176ef6d8dcd6974c27fdcffd803cde9491edb60d679652a69a9a6f5fcaa5d0def85a7884b3b45590798333f84fddd2c8ed758242dd9813297eb767e3215e6358aa56d7dedc22d7f1b49c29dea13f3b6ca145e3952a97f9477251edf8881f3ae13e3bb563edf72d20eb7580ad1ec6d0e087bf9bd391642f25ff4a4fc57f6318a1c5ccd4545ca9492f1c9e54ee0f3d2e24b65496e58d99d128ff07db87e06ee31154976bbb15d9c1d92430909bcc8b659b946efeefeaabc302d491e6c8fe31192780b9d745619d5c96564f03ae9815ca6ff53d9fa1e1f357190090a00d531d1f53bd2b26d53c9027bae582d4cb7aae3f700e2bc375e0c0265344ee7fec94e294464eefb50750c0ea5572a8cff24d77e733a911a1f8188c4c12ec1d723cf99dad27ef8cce3dda050443c009270a09b410f75828a7807bfe1e773ccfd69390f057c47d9ba01e7409ab20e15394d604fbd78dfe9311b49ddda4f8d972ea7396b798f4e2c8700919e28628a12ca945284327bf5eed1cb541042214469049537b5d1df830a63bf33536d5699855a6d9f3d5d5f77be9db12a6ac58063f99dfcdbbd1efc6d3a3c4ee5b3ff84b8438584e545bda7438e257419cabfd677d41ddbd2e9e572ba8e049c02b0cf4cbeb0e5e2d22b04c242fd1802019770d0e43313ad67f8d313d3a5a53161a758c97345790fe9ee1397001a85de21e8cb1b4ae0daa2a836e510a9e6e39315bc181ef9faee62bffdce571ed9a532335a8ecf2a670c80ce429119860759b630f56befa31a40088cbc6d35919a5a3b5c880d635ea165e4351036d39aa1f1fb617239429541a2a13f3ff0a4fbc15f5e41ead482895c013af8733ba4111b27fba0630b1841894f4e5cb54673aa62e57f04a3f955c54232a4420b643112a9a377b5823dbdce89fc458264db937853d208f3bdc3a6d2bab8eec259d78749e7c22e36b009e010a2312340ef54c6db434a2d43de42f8f77b3514f72298e1386a6a52146cb7acc6bdfa3c6d9746d9373dee3fc7a07e3309b5fb36ee423be760a23dd9c706bf299c0f1a24357a3a40d5d02200f669c92b46f7c5fdafd1f8a773529b18b6fd99802d9986d06c2b28dd5c8d58952581bbad15c29ffa0dadf04e5d965aa6526a304df65ffd75ba713ff15e77562acbd756c971ed9085323da6874d8bd86990ffe5e834a8943d3fadfdfb18adce9ed52beaa4c33dfc5ad22647d4409a3338d213d99497d3c32563f676b93d57701d35f005a6513d3ff2cff8d3258f0a400db58d92424cbbad00a6d4b6f30fb9957668fe573c6be70c6c65bfb813e5a0fa0734162dc99947970867fca0b4180dd71400ab0ff52c20ac9e5648cd3389387968e3a62dc99947970867fca0b4180dd71400ab0ff52c20ac9e5648cd3389387968e3a92e9fe0fdf139b82747c26996d09d86b7b0c235c21e467349f98d32e9c30091a3daf6cdf50fc188643ce57ea7c7ffe14b2d848d38a99028751ec278225c5295c9e0a00e7167772da52f8dbe711f98f3e575f3740da3c5138d7328e69f58c414d0100000000000000f0f78a0f69e99f97e76dbf3f89f46509d2d1958461585f2086d13f327603bec0a88460350fd1f8771a4d491fba5a47d44febe54727ef8474247d2dfff8c3bd2d87d999c587c5015c02a914c71256bb95bebe01f5d3281330dd1dc3e41583c8007b4c4cc3f5e948e7c18c4473f16c1bff076eb456382ccc0a62cdb76f617d6319992584556a1ae9b82f57984168deedf5479b0656c80a1c996087c82195748b490100000000000000020000000000000000000000000000000000000000000000000000000000000000a5e214a9f4b991de3d82c7d54d6cccf4546c4e0ad1deb2c2b46f8153e2847a972a2577cc9c202301ddce341ec762c47717fdf02bb0fa519eb7e62d5f6008e37beb0d00283e785d3d82902655cc77c93c715198add4a6ef98d49ce771867c80a5a855241588d6049eef0b733e13af9413c79245e48485a0fee027c1fbb147991cf7b971774e153965a68a8439904c921280a094a58d1d01d00b9127d5dc7dfb770bcb762e5ea7b3c7e37f01af883932549059ae56e31c25d3d28f1271f8a29f67bf3557dcc08f7f8b62b61ba3af59b9588013a32e991b403e11e614ed8d3d9ec8ead796f9a0f2c13f57b245a0522fc4ed9d0246ff16ffc3fe308cdd4e998c829fc2666134905bbf8dd9bc13b8e52a7a5559e88badc2cfdca2fddf1f69623546568b800488bf637e396ca0fc543113beb7d090b0370ed85996f5ce16d09f4c73442b5c11617ab7b0fd596e8f26a13b99bc66097c2900bd33fbf795a90c84bf587b60e397914f8ad32d16bc73f318b6a8f10a60fcfb7970824c1a65982b5b4e7cecc7bb8011eef70ce70d84518dc8c1b9ec7e94be528b5cc441451578b49c5da9467f8cac2e8b41fb8c1c7c726d45d3de0a3cb5944ebebc552bf197d0935f84ee82b9a992060d354cb61616a8573c96e303ddaf5eb920c6a29946d21433e6533b8f5309c7cf2b4bd27d3eb2b909020c2ce3b95c32cb207ba2e504e63b543736f177cc5ca89a949d8316eb63f486f15abb3df12aa49563d84f9255b12603205e94f17ef582e29ed2f19328a2406a4d5ce0006d701799bfbd7299d29ea099997e87016ce796425b1bd4711b847955584d877b0d93a673dde5a8b0dab9481508fecf2da92c395e7b8d07d12634d5b79e2400d6708799f0a43400d1f297482f28b89891a6f54ac4c6f9d4f823faba42bd0e210fd912f5aad1c8834125811a0a9d761d1493f54a3bb189509b199787034248e9c69b33a6bd2f59c8a18bf0a3513038f239c2c69a79d3f46111dd65e76d6f153acbf1a06242a5667988dc9456af728d19de7e838e299a3f89a125e1e3b25282e555830bccdb1113fb0f0889f0d7a63cdb6989eedc81fba490432d89828334e2f0002ee08fb30e7a8965fcfaff39a5dfc62ad421f90d455eab9ecfa1fdfcf8a692602a993604d4d25e79e98f3afdd32be926613708b4c79445a485b2f1b225a9f5cd5c37d084e94a901e47871814f71e11d0eb93d6bf8b0d74f60f1cee1de37da2945581807125080a8212810d642bca1facad316b3a629175cb21e4f478dc87e5a5813e46417a6143bea4e0720585509e3baf894d1ccadb5d9012ad430940d28c7752a78b5d4175e42205a05db21aa30ef3c16ded249312d66d65ca039223552806326f70c51206258418866ed64830b0718c3b6b0fa35df89716e28efdc99b9af044caaafbbb5b749894621317956b987d32f52975bb962cb47189dc7ff4e02c7c7c517d4ac9130c0a2a1d2cd60364b790254aaf9304eaae4b18c6efda523ac8a51455b396c60bbe789e6fe9a28ec7b774fb767524fc9a129c4c31c6f383636b192919899a28f390ca675b0b75edf8a8e27b015a2697a357a602fb9a3df28ba10c4a1eb7e566c9d00812f2f5a9e835b510ee5bc40b4c49cf2838be1d3b8ca79752ed0c1ff71b4c8e5add1cc02be37e8841410ad6a5d128bacb33f25a6480548dd3e29e269e051fc832784777f01c3681600ffed2e5f58ae7a52dff630f8fd0b8fddb83611603b2026cfcb8a2568cf755e16f6ce64e7223528139f074afa08257e92bffc2590bdc1191aefd00d5a9e969f1aa9a7a0c69cb9dd720627a80820d274ad33af4be069548ec0cb344fac8434a6a8d758393ba9a40661261e926aae2e100762bddbb9da3564a840b7f6abaee5237312aafdf0c424c200cf4f8bb60486a652ab2f8e44cc121986f718c3a90d0df013d78afe65775a3b661f522e8ccdb2b1e97d42cc1e4eb04ffd88fca4636b163a9e18ddc3f44efc2102816f1203009a5622f4e780c369da0248ccaa5a7cdbce4a92f62bf94b146fe1416b8b3eebdddae400a5440cc2f348b809d61609ea6a8f6c99867f55dbdf794dd0bfd26dff9b9aae8b54dd26e82a89f83ae49d08239c53def0e5409ac29da1a3269fd26dff9b9aae8b54dd26e82a89f83ae49d08239c53def0e5409ac29da1a326957cc4216a5309c34a0df1199fa0c12f30bf23f4a03e09f5406fe88464ef0866a88a5d2f89f94ad11381b4d1bb744a5698e3ae15185f8770cc359abd6c220720084c54cc2c1454144bcfb56e48ff1c3df2cf982d7d937b8d05959a3821e3d4e27"
	hexTxHash := "f1839fc865532b54c98259f58328c9c672db57a373f59f884e90c66de45b5a0c"

	txHash, err := hex.DecodeString(hexTxHash)
	if err != nil {
		t.Fatalf("Unable to decode hash hex: %v", err)
	}

	payload, err := hex.DecodeString(hexPayload)
	if err != nil {
		t.Fatalf("Unable to decode tx hex: %v", err)
	}

	txdummy := transactions.NewTransaction()
	txdummy.TxType = 1
	txdummy.Payload.Data = payload

	decoded, err := txdummy.Decode()
	if err != nil {
		t.Fatalf("Unable to decode staking: %v", err)
	}

	assert.NotEqualValues(decoded.Anchor, make([]byte, 32), "Anchor should not be empty")
	assert.NotNil(decoded.Call, "Call should be present")
	assert.NotNil(decoded.Crossover, "Crossover should  be present")
	assert.NotZero(decoded.Fee.GasLimit, "GasLimit should not be 0")
	assert.NotZero(decoded.Fee.GasPrice, "GasPrice should not be 0")
	assert.NotEmpty(decoded.Nullifiers, "Nullifiers should be present")

	hash, err := decoded.Hash(txdummy.TxType)
	if err != nil {
		t.Fatalf("Unable to calculate hash for staking: %v", err)
	}

	assert.EqualValues(txHash, hash, "hash mismatch for staking")
}
